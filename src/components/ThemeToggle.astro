<button
  id="themeToggle"
  type="button"
  data-theme-toggle
  aria-label="Change to light theme">Change to light theme</button
>

<script>
  const setColorTheme = (): void => {
  function calculateSettingAsThemeString({
    localStorageTheme,
    systemSettingDark,
  }: {
    localStorageTheme: string | null;
    systemSettingDark: MediaQueryList;
  }): string {
    if (localStorageTheme !== null) {
      return localStorageTheme;
    }

    if (systemSettingDark.matches) {
      return "dark";
    }

    return "light";
  }

  function updateButton({
    buttonEl,
    isDark,
  }: {
    buttonEl: HTMLButtonElement;
    isDark: boolean;
  }): void {
    const newCta = isDark ? "Change to light theme" : "Change to dark theme";

    buttonEl.setAttribute("aria-label", newCta);
    buttonEl.innerText = newCta;
  }

  function updateThemeOnHtmlEl({
    theme,
  }: {
    theme: string;
  }): void {
    document.querySelector("html")!.setAttribute("data-theme", theme);
  }

  const button = document.querySelector<HTMLButtonElement>(
    "[data-theme-toggle]"
  )!;
  const localStorageTheme = localStorage.getItem("theme");
  const systemSettingDark = window.matchMedia("(prefers-color-scheme: dark)");

  let currentThemeSetting = calculateSettingAsThemeString({
    localStorageTheme,
    systemSettingDark,
  });

  updateButton({
    buttonEl: button,
    isDark: currentThemeSetting === "dark",
  });
  updateThemeOnHtmlEl({ theme: currentThemeSetting });

  button.addEventListener("click", (event) => {
    const newTheme = currentThemeSetting === "dark" ? "light" : "dark";

    localStorage.setItem("theme", newTheme);
    updateButton({
      buttonEl: button,
      isDark: newTheme === "dark",
    });
    updateThemeOnHtmlEl({ theme: newTheme });

    currentThemeSetting = newTheme;
  });
};

setColorTheme();

document.addEventListener("astro:beforeload", setColorTheme);

</script>
